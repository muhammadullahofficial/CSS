/* CSS transform is a powerful property used to visually manipulate elements by moving, rotating, scaling, or skewing them. This property works by modifying the coordinate space of the CSS visual formatting model, which enables a variety of effects that enhance web design. Hereâ€™s a breakdown of the most commonly used transform functions:

1. Translate
Moves an element along the X and Y axes.
Syntax: transform: translate(x, y);
Example: transform: translate(20px, 10px);

.box {
    transform: translate(50px, 20px);
}
2. Scale
Resizes an element by scaling it up or down along the X and/or Y axes.
Syntax: transform: scale(x, y);
Example: transform: scale(1.5, 1.2); (enlarges width by 1.5x and height by 1.2x)

.box {
    transform: scale(1.2);
}
3. Rotate
Rotates an element clockwise or counterclockwise.
Syntax: transform: rotate(angle);
Example: transform: rotate(45deg);

.box {
    transform: rotate(30deg);
}
4. Skew
Tilts an element along the X and/or Y axes.
Syntax: transform: skew(x-angle, y-angle);
Example: transform: skew(20deg, 10deg);

.box {
    transform: skew(15deg, 5deg);
}
5. Perspective
Adds depth to 3D transformed elements.
Usually used with perspective CSS property or as a value in transform functions.
Syntax: transform: perspective(value) rotateX(angle);

.box {
    perspective: 500px;
    transform: rotateX(30deg);
}
6. Combining Transforms
Multiple transform functions can be applied in a single transform property.
Example: transform: translate(20px, 30px) rotate(45deg) scale(1.2);

.box {
    transform: translate(20px, 20px) rotate(15deg) scale(1.1);
}
Practical Example
Here's an example of a simple CSS animation using transform to rotate and scale an element:

<div class="animated-box"></div>

.animated-box {
   width: 100px;
   height: 100px;
   background-color: #3498db;
   transition: transform 0.3s ease;
}

.animated-box:hover {
   transform: rotate(45deg) scale(1.2);
}
Tips for Using transform
Use transition or animation with transform for smooth effects.
transform-origin can adjust the point around which transformations occur, especially useful for rotations.
These transformation techniques are widely used in modern UI/UX for effects like hover animations, modals, image galleries, and more. Let me know if you'd like specific examples or further customization on how to apply transform in a project!
 */

* {
  padding: 0;
  margin: 0;
}
.container {
  height: 90vh;
  width: 90vw;
  border: 2px solid black;
  background-color: darkcyan;
  margin: auto;
  display: flex;
}
.box {
  height: 150px;
  width: 150px;
  border: 1px solid black;
  margin: auto;
  transform: translate(50px);
  transform: scale(1.5, 1.2);
  transform: rotate(30deg);
  transform: skew(15deg, 5deg);
}
.box:first-child {
  background-color: darkkhaki;
}
.box:nth-child(2) {
  background-color: crimson;
}
.box:last-child {
  background-color: hotpink;
}
