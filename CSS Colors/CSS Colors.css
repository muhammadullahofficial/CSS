/* In CSS, colors are an essential part of styling, allowing you to set the appearance of text, backgrounds, borders, and other elements. CSS provides several ways to define colors, including color names, HEX codes, RGB, RGBA, HSL, and HSLA values. Let’s explore each option:

1. Color Names
CSS has a predefined set of color names (like red, blue, green, yellow, etc.).
Example:

h1 {
  color: red;
}
2. HEX Codes
HEX (hexadecimal) values are a popular way to define colors in CSS.
HEX codes start with # and are followed by six characters representing the red, green, and blue values.
Syntax: #RRGGBB
Example:

p {
  color: #ff5733;  A shade of orange 
}
Short HEX Codes: If the color has repeating pairs, you can shorten the HEX to three characters.
For example, #ff0000 (red) can be shortened to #f00.
3. RGB Colors
RGB stands for Red, Green, and Blue, with each color taking a value from 0 to 255.
Syntax: rgb(red, green, blue)
Example:

div {
  background-color: rgb(255, 87, 51);  A shade of orange 
}
4. RGBA Colors (RGB with Opacity)
The rgba format is like RGB but with an added alpha (opacity) value ranging from 0 (fully transparent) to 1 (fully opaque).
Syntax: rgba(red, green, blue, alpha)
Example:

section {
  background-color: rgba(255, 87, 51, 0.5);  50% opacity 
}
5. HSL Colors
HSL stands for Hue, Saturation, and Lightness, which is a more intuitive way to describe colors.
Hue is the degree on the color wheel (0 to 360).
Saturation is the intensity of the color (0% is gray, 100% is full color).
Lightness is the brightness of the color (0% is black, 50% is normal, 100% is white).
Syntax: hsl(hue, saturation%, lightness%)
Example:

footer {
  color: hsl(16, 100%, 50%);  A shade of orange 
}
6. HSLA Colors (HSL with Opacity)
Like hsl, but with an added alpha channel for opacity.
Syntax: hsla(hue, saturation%, lightness%, alpha)
Example:

nav {
  background-color: hsla(16, 100%, 50%, 0.7);  70% opacity 
}
7. CSS Custom Properties (Variables)
CSS allows you to define custom color variables that can be reused throughout your stylesheet.
You define a variable with a name, then use it in your CSS.
Example:

:root {
  --primary-color: #3498db;
  --secondary-color: hsl(200, 100%, 50%);
}

body {
  color: var(--primary-color);
}

.button {
  background-color: var(--secondary-color);
}
Example of Combining Color Types in a Style Sheet
Here’s how you might use different color methods in a CSS file:

body {
  color: #333333;  HEX 
  background-color: rgb(245, 245, 245);  RGB 
}

h1 {
  color: hsl(200, 100%, 50%);  HSL 
}

p {
  color: rgba(0, 0, 0, 0.8);  RGBA 
}

a {
  color: blue;  Named Color 
}
Tips for Choosing Colors
Consistency: Use a consistent color scheme across your site.
Contrast: Ensure good contrast between text and background for readability.
Accessibility: Aim for high-contrast color choices to make content accessible to users with visual impairments. */

h1,
h2,
h3,
h4,
h5,
h6 {
  text-align: center;
}
h1 {
  color: brown;
}
h2 {
  color: #0fb641;
}
h3 {
  color: rgb(100, 63, 56);
}
h4 {
  color: rgba(100, 90, 30, 0.5);
}
h5 {
  color: hsl(200, 60%, 30%);
}
h6 {
  color: hsla(300, 33%, 23%, 0.9);
}
