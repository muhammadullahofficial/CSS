/* 
CSS media queries allow you to apply different styles to your website depending on the user's device, screen size, orientation, or other conditions. They’re essential for creating responsive designs, ensuring your website looks great on desktops, tablets, and smartphones alike.

Here’s an overview of how media queries work and some examples:

1. Basic Syntax
Media queries are defined with the @media rule in CSS. You specify a condition (e.g., screen width) and the styles that should apply if that condition is met:


@media (condition) {
    
    CSS styles go here 
}
2. Using Media Types
Common media types include:

screen: Used for computer screens, tablets, and smartphones.
print: Used for printed documents.
Example:

@media screen {
    body {
        font-size: 16px;
    }
}
3. Common Conditions
Width-Based Queries: You can target specific screen widths to create styles for various devices:

@media (max-width: 768px) {
     Styles for screens 768px or narrower 
    .container {
        width: 100%;
    }
}
Orientation: Useful for styling based on device orientation:

@media (orientation: landscape) {
     Styles for landscape mode 
    .header {
        height: 50px;
    }
}
Resolution: Target high-resolution screens, such as Retina displays:

@media (min-resolution: 192dpi) {
     High-resolution specific styles 
    img {
        width: 100%;
    }
}
4. Combining Conditions
You can combine multiple conditions using and, or, and not:

@media screen and (max-width: 768px) and (orientation: portrait) {
    Styles for portrait orientation on screens 768px or narrower 
    .nav {
        display: none;
    }
}
5. Mobile-First Approach
A mobile-first approach means defining styles for mobile (small screens) first and then adding media queries for larger screens. This approach often leads to cleaner, more manageable code.

Example:

 Default styles for small screens 
body {
    font-size: 14px;
}

 Larger screen styles 
@media (min-width: 768px) {
    body {
        font-size: 16px;
    }
}
@media (min-width: 1024px) {
    body {
        font-size: 18px;
    }
}
6. Best Practices
Start with a mobile-first design and progressively enhance for larger screens.
Minimize CSS within media queries to improve performance.
Test your design on various devices to ensure responsive behavior.
Media queries are powerful tools in CSS that enable you to make responsive, flexible layouts. By using these effectively, you can adapt your designs to work seamlessly across different devices. */

.boxes {
  width: 25vw;
  height: 25vh;
  border: 2px solid black;
  padding: 10px;
  margin: 10px;
}
.box1 {
  background-color: blueviolet;
}
.box2 {
  background-color: #2be2e2;
}
.box3 {
  background-color: #e9de4c;
}

.olddiv {
  display: flex;
}
@media screen and (max-width: 1000px) {
  .box1 {
    background-color: rgb(61, 1, 117);
  }
  .box2 {
    background-color: #007272;
  }
  .box3 {
    background-color: #726a00;
  }
  .olddiv {
    display: block;
  }
  .boxes {
    width: 400px;
    height: 400px;
    border: 2px solid rgb(192, 28, 28);
    padding: 5px;
    margin: 5px;
    border-radius: 40px;
  }
  body {
    background-color: black;
  }
}
