/* Here's a detailed explanation of all the essential properties of CSS Grid, broken down into grid container and grid item properties. CSS Grid allows for complex layouts with fewer lines of code and greater flexibility, especially for responsive designs.

Grid Container Properties
A "grid container" is any HTML element with display: grid or display: inline-grid. These properties define the grid structure:

1. display: grid or display: inline-grid
display: grid creates a block-level grid container.
display: inline-grid creates an inline grid container, meaning it doesn’t break the flow of surrounding content.
2. grid-template-columns and grid-template-rows
Defines the number and size of columns/rows in the grid.

Syntax: You can use values like 100px 1fr 2fr, percentages, auto, or functions like repeat() and minmax().

grid-template-columns: 1fr 2fr;
grid-template-rows: 100px 200px;
3. grid-template-areas
Defines named grid areas, which you can use to control the layout by naming regions and then placing content in specific grid areas.

grid-template-areas:
  "header header"
  "sidebar content"
  "footer footer";
4. grid-template
A shorthand for grid-template-rows, grid-template-columns, and grid-template-areas.

grid-template: 
  "header header" 100px
  "sidebar content" auto
  "footer footer" 50px;
5. gap, row-gap, and column-gap
gap (or grid-gap): Sets the space between grid rows and columns.

row-gap: Specifically sets the gap between rows.

column-gap: Specifically sets the gap between columns.

gap: 10px 20px; 10px between rows, 20px between columns 
6. justify-items
Aligns grid items horizontally within their grid area.

Values: start, end, center, stretch (default).
justify-items: center;
7. align-items
Aligns grid items vertically within their grid area.

Values: start, end, center, stretch (default).


align-items: stretch;
8. place-items
A shorthand for align-items and justify-items.

place-items: center;  centers both horizontally and vertically 
9. justify-content
Aligns the whole grid within the grid container horizontally.

Values: start, end, center, stretch, space-between, space-around, space-evenly.

justify-content: space-between;
10. align-content
Aligns the whole grid within the grid container vertically.

Values: Similar to justify-content.

align-content: center;
11. place-content
Shorthand for align-content and justify-content.

place-content: center stretch;
12. grid-auto-rows and grid-auto-columns
Defines the size of implicitly created rows or columns (when you add more items than you have defined in grid-template-rows or grid-template-columns).


grid-auto-rows: 100px;
grid-auto-columns: 1fr;
13. grid-auto-flow
Controls the automatic placement of items that don’t fit in the defined grid.

Values: row, column, row dense, column dense.


grid-auto-flow: row dense;
Grid Item Properties
Grid items are the direct children of a grid container. These properties allow individual grid items to be placed within the grid structure.

1. grid-column-start and grid-column-end
Specifies where a grid item starts and ends along the column axis.

grid-column-start: 2;
grid-column-end: 4;
2. grid-row-start and grid-row-end
Specifies where a grid item starts and ends along the row axis.


grid-row-start: 1;
grid-row-end: 3;
3. grid-column and grid-row
Shorthand for grid-column-start/grid-column-end and grid-row-start/grid-row-end.


grid-column: 2 / 4;
grid-row: 1 / 3;
4. grid-area
Defines a grid item’s position and size based on named grid areas from grid-template-areas.

Alternatively, it can serve as shorthand for grid-row-start, grid-column-start, grid-row-end, and grid-column-end.


grid-area: header;
or 
grid-area: 1 / 2 / 3 / 4;
5. justify-self
Aligns a grid item horizontally within its grid area.

Values: start, end, center, stretch (default).


justify-self: end;
6. align-self
Aligns a grid item vertically within its grid area.

Values: start, end, center, stretch (default).


align-self: center;
7. place-self
A shorthand for align-self and justify-self.


place-self: center;
Examples and Tips
CSS Grid is often combined with media queries for responsive layouts. Here's an example layout that changes based on screen size:

.grid-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}

@media (max-width: 600px) {
  .grid-container {
    grid-template-columns: 1fr;
  }
}
CSS Grid enables flexibility, responsive control, and easy alignment, especially for complex layouts with overlapping elements or varied sizes.
 */

* {
  padding: 0;
  margin: 0;
}
.container {
  height: 93vh;
  width: 80vw;
  border: 2px solid black;
  background-color: #73da95;
  margin: auto;
  display: grid;
  grid-template-columns: 1fr 2fr;
  grid-template-rows: repeat(3 1fr);
  column-gap: 10px;
}
.item {
  width: 90px;
  height: 90px;
  border: 1px solid black;
  margin: 5px;
}
.item.item:first-child {
  background-color: cornflowerblue;
}
.item:nth-child(2) {
  background-color: dimgray;
}
.item:nth-child(3) {
  background-color: darkslateblue;
}
.item:nth-child(4) {
  background-color: fuchsia;
}
.item:last-child {
  background-color: lightcoral;
}
